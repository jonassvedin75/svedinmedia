'use server';
/**
 * @fileOverview AI flow for generating ideas based on a theme or problem statement.
 *
 * - generateIdea - A function that generates 2-3 example ideas using AI.
 * - GenerateIdeaInput - The input type for the generateIdea function.
 * - GenerateIdeaOutput - The return type for the generateIdea function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateIdeaInputSchema = z.object({
  theme: z.string().describe('The theme or problem statement to generate ideas for.'),
});
export type GenerateIdeaInput = z.infer<typeof GenerateIdeaInputSchema>;

const GenerateIdeaOutputSchema = z.object({
  ideas: z.array(
    z.string().describe('An idea generated based on the provided theme.')
  ).describe('A list of ideas generated by the AI.'),
});
export type GenerateIdeaOutput = z.infer<typeof GenerateIdeaOutputSchema>;

export async function generateIdea(input: GenerateIdeaInput): Promise<GenerateIdeaOutput> {
  return generateIdeaFlow(input);
}

const generateIdeaPrompt = ai.definePrompt({
  name: 'generateIdeaPrompt',
  input: {schema: GenerateIdeaInputSchema},
  output: {schema: GenerateIdeaOutputSchema},
  prompt: `You are a creative idea generator. Given a theme or problem statement, you will generate 2-3 example ideas.

Theme/Problem Statement: {{{theme}}}

Ideas:`,
});

const generateIdeaFlow = ai.defineFlow(
  {
    name: 'generateIdeaFlow',
    inputSchema: GenerateIdeaInputSchema,
    outputSchema: GenerateIdeaOutputSchema,
  },
  async input => {
    const {output} = await generateIdeaPrompt(input);
    return output!;
  }
);
